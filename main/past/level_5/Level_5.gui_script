require "main.words"

local word1, word2, word3 = M.words_print_level5()

edge = 50
input_length = 0
passing_level = 0
number_tiles = 25

function init(self)
	msg.post(".", "acquire_input_focus")
	
	level_5 = {
		[1] = {
			[1] = {order = 5, data = word1[5], word_length = 9},
			[2] = {order = 4, data = word1[4], word_length = 9},
			[3] = {order = 3, data = word1[3], word_length = 9},
			[4] = {order = 2, data = word1[2], word_length = 9},
			[5] = {order = 1, data = word1[1], word_length = 9},
		},
		[2] = {
			[1] = {order = 6, data = word1[6], word_length = 9},
			[2] = {order = 7, data = word1[7], word_length = 9},
			[3] = {order = 8, data = word1[8], word_length = 9},
			[4] = {order = 9, data = word1[9], word_length = 9},
			[5] = {order = 1, data = word3[1], word_length = 7},
		},
		[3] = {
			[1] = {order = 3, data = word2[3], word_length = 9},
			[2] = {order = 2, data = word2[2], word_length = 9},
			[3] = {order = 1, data = word2[1], word_length = 9},
			[4] = {order = 7, data = word3[7], word_length = 7},
			[5] = {order = 2, data = word3[2], word_length = 7},
		},
		[4] = {
			[1] = {order = 4, data = word2[4], word_length = 9},
			[2] = {order = 9, data = word2[9], word_length = 9},
			[3] = {order = 8, data = word2[8], word_length = 9},
			[4] = {order = 6, data = word3[6], word_length = 7},
			[5] = {order = 3, data = word3[3], word_length = 7},
		},
		[5] = {
			[1] = {order = 5, data = word2[5], word_length = 9},
			[2] = {order = 6, data = word2[6], word_length = 9},
			[3] = {order = 7, data = word2[7], word_length = 9},
			[4] = {order = 5, data = word3[5], word_length = 7},
			[5] = {order = 4, data = word3[4], word_length = 7},
		},
	}

	for i in ipairs(level_5) do
		for j in ipairs(level_5[i]) do
			local node = gui.get_node('label_' .. i .. '_' .. j)
			gui.set_text(node, level_5[i][j].data)
			level_5[i][j].started = false
			level_5[i][j].input_order = 0
			level_5[i][j].finished = false
		end
	end

	level_5_cord = {
		[1] = {
			[1] = {position_x = 120, position_y = 600},
			[2] = {position_x = 240, position_y = 600},
			[3] = {position_x = 360, position_y = 600},
			[4] = {position_x = 480, position_y = 600},
			[5] = {position_x = 600, position_y = 600},
		},
		[2] = {
			[1] = {position_x = 120, position_y = 480},
			[2] = {position_x = 240, position_y = 480},
			[3] = {position_x = 360, position_y = 480},
			[4] = {position_x = 480, position_y = 480},
			[5] = {position_x = 600, position_y = 480},
		},
		[3] = {
			[1] = {position_x = 120, position_y = 360},
			[2] = {position_x = 240, position_y = 360},
			[3] = {position_x = 360, position_y = 360},
			[4] = {position_x = 480, position_y = 360},
			[5] = {position_x = 600, position_y = 360},
		},
		[4] = {
			[1] = {position_x = 120, position_y = 240},
			[2] = {position_x = 240, position_y = 240},
			[3] = {position_x = 360, position_y = 240},
			[4] = {position_x = 480, position_y = 240},
			[5] = {position_x = 600, position_y = 240},
		},
		[5] = {
			[1] = {position_x = 120, position_y = 120},
			[2] = {position_x = 240, position_y = 120},
			[3] = {position_x = 360, position_y = 120},
			[4] = {position_x = 480, position_y = 120},
			[5] = {position_x = 600, position_y = 120},
		},
	}
end

function on_input(self, action_id, action)
	level = level_5
	level_cord = level_5_cord
	click_x = action.x
	click_y = action.y
	if action_id == hash("touch") and action.value == 1 then
		M.typing_word()
	elseif action_id == hash("touch") and action.released and action.value == 0 then
		M.word_check(self)
		input_length = 0
		passing_level = 0
	end
end